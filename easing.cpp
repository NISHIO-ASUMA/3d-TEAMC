//==============================================================================================================
//
// イージング [easing.cpp]
// Author: YOSHIDA YUTO
//
//==============================================================================================================

//**************************************************************************************************************
// インクルードファイル
//**************************************************************************************************************
#include "easing.h"

//**************************************************************************************************************
// マクロ定義
//**************************************************************************************************************
#define MAX_PULL (0.70158f) // 引っ張り度合

//==============================================================================================================
// イージング(加速) 
//==============================================================================================================
float EaseInQuad(float t)
{
	return t * t;
}
//==============================================================================================================
// イージング(減速)
//==============================================================================================================
float EaseOutQuad(float t)
{
	return 1 - (1 - t) * (1 - t);
}
//==============================================================================================================
// イージング(加速→減速)
//==============================================================================================================
float EaseInOutQuad(float t)
{
	return t < 0.5f ? 2.0f * t * t : 1 - pow(-2 * t + 2, 2) / 2;
}
//==============================================================================================================
// イージング(より強い加速)
//==============================================================================================================
float EaseInOutQuart(float t)
{
	return t * t * t * t;
}
//==============================================================================================================
// イージング(さらに強い加速)
//==============================================================================================================
float EaseInOutQuint(float t)
{
	return t * t * t * t * t;
}
//==============================================================================================================
// イージング(最初に少し引っ張り、進行後に速く動き始める)
//==============================================================================================================
float EaseInBack(float t)
{
	const float s = MAX_PULL;  // 引っ張り度合い
	return t * t * ((s + 1) * t - s);  // 反転の動き
}
//==============================================================================================================
// イージング(最初に少し引っ張り、進行後に速く動き始める)
//==============================================================================================================
float EaseOutBack(float t)
{
	const float s = MAX_PULL;  // 引っ張り度合い
	t -= 1;
	return (t * t * ((s + 1) * t + s) + 1);  // 反転の動き
}
//==============================================================================================================
// イージング(最初に少し引っ張り、進行後に速く動き始める)
//==============================================================================================================
float EaseInOutBack(float t)
{
	const float s = MAX_PULL * 1.525f;  // 引っ張り度合いの調整
	if (t < 0.5f)
	{
		t *= 2;
		return 0.5f * (t * t * ((s + 1) * t - s));  // 前半は反転と加速
	}
	else
	{
		t = t * 2 - 2;
		return 0.5f * (t * t * ((s + 1) * t + s) + 2);  // 後半は反転と減速
	}
}
//==============================================================================================================
// イージング(振動する動きで、最初は急速に進み、途中で振動を繰り返す)
//==============================================================================================================
float EaseInElastic(float t)
{
	if (t == 0)
	{
		return 0;  // 開始時点
	}
	if (t == 1)
	{
		return 1;  // 終了時点
	}
	const float p = 0.3f;  // 振動周期
	const float s = p / 4;  // 振動の強さ

	return -(pow(2, 10 * (t -= 1)) * sin((t - s) * (2 * D3DX_PI) / p));  // 振動の動き
}
//==============================================================================================================
// イージング(振動する動きで、最初は急速に進み、途中で振動を繰り返す)
//==============================================================================================================
float EaseOutElastic(float t)
{
	if (t == 0)
	{
		return 0;  // 開始時点
	}
	if (t == 1)
	{
		return 1;  // 終了時点
	}

	const float p = 0.3f;  // 振動周期
	const float s = p / 4;  // 振動の強さ

	return pow(2, -10.0f * t) * sin((t - s) * (2 * D3DX_PI) / p) + 1;  // 振動の動き
}
//==============================================================================================================
// イージング(振動する動きで、最初は急速に進み、途中で振動を繰り返す)
//==============================================================================================================
float EaseInOutElastic(float t)
{
	if (t == 0)
	{
		return 0;  // 開始時点
	}
	if (t == 1)
	{
		return 1;  // 終了時点
	}
	const float p = 0.3f * 1.5f;  // 振動周期
	const float s = p / 4;  // 振動の強さ

	if (t < 0.5f)
	{
		return -0.5f * (pow(2, 20 * t - 10) * sin((20 * t - 11.125f) * (2 * D3DX_PI) / p));
	}

	return pow(2, -20 * t + 10) * sin((20 * t - 11.125f) * (2 * D3DX_PI) / p) * 0.5f + 1;
}
//==============================================================================================================
// イージング(急激な加速)
//==============================================================================================================
float EaseInCubic(float t)
{
	return t * t * t;
}
//==============================================================================================================
// イージング(急激な減速)
//==============================================================================================================
float EaseOutCubic(float t)
{
	return 1 - pow(1 - t, 3);
}
//==============================================================================================================
// イージング(加速→減速)
//==============================================================================================================
float EaseInOutCubic(float t)
{
	return t < 0.5 ? 4 * t * t * t : 1 - pow(-2 * t + 2, 3) / 2;
}
//==============================================================================================================
// イージング(緩やかな加速)
//==============================================================================================================
float EaseInSine(float t)
{
	return 1 - cos((t * D3DX_PI) / 2);
}
//==============================================================================================================
// イージング(緩やかな減速)
//==============================================================================================================
float EaseOutSine(float t)
{
	return  sin((t * D3DX_PI) / 2);
}
//==============================================================================================================
// イージング(緩やかな加速→減速)
//==============================================================================================================
float EaseInOutSine(float t)
{
	return -(cos(D3DX_PI * t) - 1) / 2;
}
//==============================================================================================================
// イージング(バウンド)
//==============================================================================================================
float EaseBounce(float t)
{
	if (t < (1 / 2.75f))  // 最初のバウンド
	{
		return 20.0f * t * t;  // 強さを調整して、バウンドを強調
	}
	else if (t < (2 / 2.75f))  // 2番目のバウンド
	{
		t -= (1.5f / 2.75f);
		return 20.0f * t * t + 0.75f;  // 強さを調整して、バウンドを強調
	}
	else if (t < (2.5f / 2.75f))  // 3番目のバウンド
	{
		t -= (2.25f / 2.75f);
		return 20.0f * t * t + 0.9375f;  // 強さを調整して、バウンドを強調
	}
	else  // 最後のバウンド
	{
		t -= (2.625f / 2.75f);
		return 20.0f * t * t + 0.984375f;  // 強さを調整して、バウンドを強調
	}
}
//==============================================================================================================
// イージングの設定処理
//==============================================================================================================
float SetEase(int EaseFrame, int MaxEaseFrame)
{
	// フレームが最大まで行ったら止める
	if (EaseFrame >= MaxEaseFrame)
	{
		EaseFrame = MaxEaseFrame;
	}

	// tを求める
	float t = (float)EaseFrame / (float)MaxEaseFrame;

	// tの値を返す
	return t;
}
//==============================================================================================================
// イージング(減速)
//==============================================================================================================
float EaseOutQuart(float t)
{
	return -t * (t - 2);  // 減速効果
}
//==============================================================================================================
// イージング(減速)
//==============================================================================================================
float EaseOutQuint(float t)
{
	 t -= 1;
    return (t * t * t * t * t + 1);  // 減速の調整
}
