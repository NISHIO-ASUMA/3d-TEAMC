//=====================================================================================================================
//
// 2Dミニマップ処理 [ minimap.h]
// Author: NISHIO & YOSHIDA
//
//=====================================================================================================================
#ifndef _MINIMAP_H_
#define _MINIMAP_H_

//**************************************************************************************************************
// インクルードファイル宣言
//**************************************************************************************************************
#include "main.h"

//**************************************************************************************************************
// マクロ定義
//**************************************************************************************************************
#define MINIMAP_WIDTH (200.0f) // ミニマップの横幅
#define MINIMAP_HEIGHT (200.0f) // ミニマップの高さ
#define MAX_TREXMINIMAP (257) // 最大数 (敵とプレイヤー)

//***************************************************************************************************************
// ミニマップ用テクスチャ列挙型宣言
//***************************************************************************************************************
typedef enum
{
	MINIMAPTEX_PLAYER = 0, // プレイヤー
	MINIMAPTEX_ENEMY,	   // 敵
	MINIMAPTEX_MAX
}MINIMAPTEX;

//***************************************************************************************************************
// テクスチャパス宣言
//***************************************************************************************************************
static const char* CAMERA_TEX[MINIMAPTEX_MAX] =
{
	"data\\TEXTURE\\player_circle.png", // プレイヤー
	"data\\TEXTURE\\enemy_circle.png",  // 敵
};

//***************************************************************************************************************
// ミニマップ用テクスチャ構造体宣言
//***************************************************************************************************************
typedef struct
{
	D3DXVECTOR3 pos; // 座標
	D3DXVECTOR3 rot; // 角度
	int nType;		 // 種類
	bool bUse;		 // 使用しているかどうか
	float fWidth;	 //	横幅
	float fHeight;	 // 高さ
	int nIdx;		 // インデックス
}MINIMAP;

//***************************************************************************************************************
// プロトタイプ宣言
//***************************************************************************************************************
void InitMiniMap(); // 初期化処理
void UninitMinMap();// 終了処理
void UpdateMiniMap(); // 更新処理
void DarwMinimap(); // 描画処理
void SetMiniMap(D3DXVECTOR3* pPos, int nIdx); // 設定処理

#endif // !_MINIMAP_H_
